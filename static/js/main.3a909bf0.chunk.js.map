{"version":3,"sources":["components/chat/messageList/messageList.js","components/chat/header/header.js","components/chat/sendMessage/sendMessage.js","components/chat/Main.js","components/chat/messageList/notification.js","components/auth/loginForm.js","App.js","serviceWorker.js","index.js"],"names":["MessageList","getData","data","Date","toString","substr","_this2","this","react_default","a","createElement","className","props","messages","map","message","console","log","key","id","from","name","time","React","Component","Header","connect","onClick","logOut","SendMessage","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","preventDefault","sendMessage","onSubmit","onChange","placeholder","type","url","urlProvider","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","concat","stop","apply","arguments","Main","ws","ReconnectingWebSocket","addMessage","toConsumableArray","messageString","send","JSON","stringify","onmessage","evt","parse","user","notificationDOMRef","createRef","onopen","document","hidden","window","Notification","permission","requestPermission","alert","notifyMe","onclose","WebSocket","logout","messageList_MessageList","sendMessage_SendMessage","LoginForm","nickname","event","setUser","localStorage","setItem","getItem","htmlFor","ref","input","textInput","App","socket","Main_Main","loginForm_LoginForm","Boolean","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a909bf0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./../../../App.css\";\r\n// import { DateTime } from \"luxon\";\r\nexport default class MessageList extends React.Component {\r\n  getData = data => {\r\n    const maxDate = new Date(data);\r\n    const isoDate = maxDate.toString();\r\n    return isoDate.substr(4, 20);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"message-list\">\r\n        {this.props.messages.map(message => {\r\n          console.log(\"message11\", message);\r\n          return (\r\n            <li\r\n              key={message[0].id}\r\n              className={\r\n                message[0].from === this.props.name\r\n                  ? \"my-message\"\r\n                  : \"server-message\"\r\n              }\r\n            >\r\n              <div className=\"wrapper-message\">\r\n                <div className=\"from-message\">{message[0].from}</div>\r\n                <div className=\"text-message\">{message[0].message}</div>\r\n                <div className=\"time-message\">\r\n                  {this.getData(message[0].time)}\r\n                </div>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./../../../App.css\";\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <div className=\"wrapper-header\">\r\n      <div className=\"wrapper-title\">\r\n        <p className=\"title\">Hello {props.name}!</p>        \r\n      </div>\r\n      <p>{props.connect}</p>\r\n      <div className=\"button-logout\">\r\n        <button className=\"log-out\"onClick={props.logOut}>Log out</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./../../../App.css\"\r\n\r\nexport default class SendMessage extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      message: ''\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n  handleChange(e) {\r\n    this.setState({\r\n      message: e.target.value\r\n    })\r\n  }\r\n  handleSubmit(e) {\r\n    e.preventDefault()\r\n    this.props.sendMessage(this.state.message)\r\n    this.setState({\r\n      message: ''\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <form\r\n        onSubmit={this.handleSubmit}\r\n        className=\"send-message\">\r\n        <input\r\n          onChange={this.handleChange}\r\n          value={this.state.message}\r\n          placeholder=\"Type your message\"\r\n          className=\"input-message\"\r\n          type=\"text\" />\r\n      </form>\r\n    )\r\n  }\r\n}","import React from \"react\";\r\nimport MessageList from \"./messageList/messageList\";\r\nimport Header from \"./header/header\";\r\nimport SendMessage from \"./sendMessage/sendMessage\";\r\nimport ReconnectingWebSocket from \"reconnecting-websocket\";\r\nimport notifyMe from \"./messageList/notification\";\r\n\r\nconst url = \"ws://st-chat.shas.tel\";\r\nconst urlProvider = async () => {\r\n  return `${url}`;\r\n};\r\n\r\nexport default class Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messages: [],\r\n      name: this.props.user,\r\n      ws: null,\r\n      connect: \"\"\r\n    };\r\n    this.sendMessage = this.sendMessage.bind(this);\r\n    this.notificationDOMRef = React.createRef();\r\n  }\r\n\r\n  ws = new ReconnectingWebSocket(urlProvider);\r\n  componentDidMount() {\r\n    this.ws.onopen = () => {\r\n      this.setState({\r\n        connect: \"online\"\r\n      });\r\n    };\r\n\r\n    this.ws.onmessage = evt => {\r\n      const message = JSON.parse(evt.data);\r\n      this.addMessage(message);\r\n\r\n      if (typeof document.hidden !== \"undefined\") {\r\n        notifyMe(message[0].message, message[0].from);\r\n      }\r\n    };\r\n\r\n    this.ws.onclose = () => {\r\n      this.setState({\r\n        connect: \"offline\",\r\n        ws: new WebSocket(url)\r\n      });\r\n    };\r\n  }\r\n\r\n  addMessage = message =>\r\n    this.setState(state => ({ messages: [...state.messages, message] }));\r\n\r\n  sendMessage = messageString => {\r\n    const message = { from: this.state.name, message: messageString };\r\n    this.ws.send(JSON.stringify(message));\r\n    this.ws.onmessage = evt => {\r\n      const message = JSON.parse(evt.data);\r\n      this.addMessage(message);\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Header\r\n          connect={this.state.connect}\r\n          logOut={this.props.logout}\r\n          name={this.state.name}\r\n        />\r\n        <main className=\"wrapper-main\">\r\n          <MessageList messages={this.state.messages} name={this.state.name} />\r\n          <SendMessage sendMessage={this.sendMessage} />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export default function notifyMe(message, from) {\r\n  // Проверка поддержки браузером уведомлений\r\n  if (!(\"Notification\" in window)) {\r\n    alert(\"This browser does not support desktop notification\");\r\n  }\r\n\r\n  // Проверка разрешения на отправку уведомлений\r\n  else if (Notification.permission === \"granted\") {\r\n    // Если разрешено, то создаем уведомление\r\n    const notification = new Notification(message);\r\n  }\r\n\r\n  // В противном случае, запрашиваем разрешение\r\n  else if (Notification.permission !== 'denied') {\r\n    Notification.requestPermission(function (permission) {\r\n      // Если пользователь разрешил, то создаем уведомление \r\n      if (permission === \"granted\") {\r\n        const notification = new Notification(message);\r\n      }\r\n    });\r\n  }\r\n}","import React from \"react\";\r\nimport \"./../../App.css\";\r\n\r\nexport default class LoginForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { nickname: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({nickname: event.target.value})    \r\n  } \r\n\r\n  handleSubmit() {    \r\n    this.props.setUser(this.state.nickname);\r\n    localStorage.setItem('name', this.state.nickname);\r\n  }\r\n\r\n  render() {\r\n    let { nickname } = this.state\r\n    if (localStorage.getItem !== null) {\r\n      const name = localStorage.getItem ('name')\r\n      nickname  = name;\r\n    }\r\n    \r\n    return (\r\n      <div className=\"wrapper-login\">\r\n        <form className=\"login-form\" onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"nickname\">\r\n            <h1 className=\"title-login-form\">Your name?</h1>\r\n          </label>\r\n\r\n          <input            \r\n            ref={input => {\r\n              this.textInput = input;\r\n            }}\r\n            className=\"nickname\"\r\n            type=\"text\"\r\n            placeholder={nickname}\r\n            onChange={this.handleChange}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n// import { BrowserRouter, Route } from \"react-router-dom\";\nimport Main from \"./components/chat/Main\";\nimport LoginForm from \"./components/auth/loginForm\";\n\nexport default class App extends React.Component {\n\tconstructor(props) {\n\t  super(props);\n\t\n\t  this.state = {\n\t  \t\tsocket:null, \n\t  \t\tuser:null\n\t\t};\n\t  this.setUser = this.setUser.bind(this)\n\t  this.logout = this.logout.bind(this)\t\t}\n\n\n\n\tsetUser(user){\t\t\n\t\tthis.setState({user});\t\t\n\t}\t\n\n\tlogout(){\t\t\n\t\tthis.setState({user:null})\n  }\n  \n\trender() {\n\t\tconst { user } = this.state \n\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t\n\t\t\t\t{\t\n\t\t\t\t\t!user ? \n\t\t\t\t\t<LoginForm setUser={this.setUser} />\n\t\t\t\t\t: \n\t\t\t\t\t<Main user={user} logout={this.logout}/>\n\t\t\t\t}\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}